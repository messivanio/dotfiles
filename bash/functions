#!/bin/bash

function mk() {
  mkdir -p "$@" && cd "$@"
}

function dcc () {
    docker-compose down && docker-compose build "$@" && docker-compose up "$@"
}

function generate_password() {
  openssl rand -base64 $1
}

function ssh_mount() {
  mkdir -p $2
  case $(uname) in
    Linux)  
      sshfs $1 $2 -o auto_cache
      ;;
    Darwin) 
      sshfs $1 $2 -o auto_cache,defer_permissions,noappledouble
      ;;
  esac
}

function get_certificate_from() {
  SITE=$1
  PORT=$2
    openssl s_client -showcerts -connect $SITE:${PORT:-443} </dev/null 2>/dev/null|openssl x509 -outform PEM >$SITE.pem
    openssl x509 -outform der -in $SITE.pem -out $SITE.crt
    ls $SITE.*
}

function add_certificate_to_ubuntu(){
    
    if [ ! -f $1.crt ]; then
        echo "I can't find $1.crt file."
        return 123
    fi    

    sudo mkdir  /usr/local/share/ca-certificates/$1
    sudo chmod 755 /usr/local/share/ca-certificates/$1
    sudo cp $1.crt /usr/local/share/ca-certificates/$1/.
    sudo chmod 644 /usr/local/share/ca-certificates/$1/$1.crt
    sudo update-ca-certificates
}

function generate_self_signed_certificate(){
  openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certificate.pem
  openssl x509 -text -noout -in certificate.pem
  openssl pkcs12 -inkey key.pem -in certificate.pem -export -out certificate.p12
  openssl pkcs12 -in certificate.p12 -noout -info
}

function search-git(){
  git grep $@ $(git rev-list --all)
}

function remote-bash(){
  ssh $1 "bash -s" -- < $2
}

function changing-pods() {
  watch "kubectl get pods $@ -o wide | grep -v Running"
}

function how-many-pods() {
  watch "kubectl get pods $@ -o wide | tail -n +2 | wc -l"
}

function kubectl() {
  kube=$(which kubectl)
  echo "$@" | grep "deploy\|create\|apply\|set \|delete\|scale " 1>/dev/null

  if [ $? -eq 0 ]; then
    CURRENT_CLUSTER=$(kubectl config view --template='{{ range .contexts }}{{ if eq .name "'$(kubectl config current-context)'" }}{{ .context.cluster }}{{ end }}{{ end }}')

    FILE=".k8s-clusters"
    if test -f "$FILE"; then
      source ${FILE}

      if [[ "$K8S_CLUSTERS" != "$CURRENT_CLUSTER" ]]; then
        echo "Current k8s Cluster: ${CURRENT_CLUSTER}"
        echo "K8S Target Clusters (from .k8s-clusters file): ${K8S_CLUSTERS}"
        echo "WRONG CLUSTER!!! Exit."
        return 1
      fi
    fi
  fi
    
  command $kube "${@}"
}
